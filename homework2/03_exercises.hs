import Data.Char
{-
1. Булеви стойности: Булевите стойности в Haskell са от тип Bool (подобно на bool в С/С++).
Могат да приемат стойностите True или False (true и false в С/С++). 

    Операции върху булеви променливи:
    &&  - логическо И   (същото като С/С++)
    ||  - логическо ИЛИ (същото като С/С++)
    not - логическо НЕ  (! в С/С++)


2. Числа: засега е важно да знаете два основни типа:
    а). Челочислени стойности: използвайте типа Integer,
    тъй като той е с неограничена точност за разлика от Int.
    
    б). Дробни числа: използвайте типа Double,
    тъй като е с по-добра точност от типа Float.

    Познатите ви от С/С++ аритметични операции работят почти както се очаква.
    За разлика от С/С++ НЕ може да прилагате аритметични операции върху числа от различен тип.
    
    - За да конвертирате цяло към дробно число, използвайте функцията fromIntegral.
    
    - За да конвертирате дробно към цяло число, използвайте функциите:
    ceiling  -- ceiling 5.1 = 6;    ceiling 5.6 = 6;
    floor    -- floor   5.1 = 5;    floor   5.6 = 5;
    round    -- round   5.1 = 5;    round   5.6 = 6;

    - Целочислено делене и остатък:
    div 5 2 == 5 `div` 2 = 2
    mod 5 2 == 5 `mod` 2 = 1
    Вторият запис се счита за "по-четим" и е за предпочитане пред първия.


3. Символи: символите в Haskell са от тип Char (подобен на типа char в С/С++)

    Полезни функции върху символи:

    ord c - връща ASCII кода на символа c. Пример: ord 'q' = 113
    chr n - връща символа с ASCII код n. Пример: chr 113 = 'q' 

    import Data.Char ви позволява да използвате следните полезни функции:

    toUpper c - обръща буквата c в главна.          
    Пример: toUpper 'Q' = 'Q';      toUpper 'q' = 'Q';      toUpper '1' = '1'
    
    toLower c - обръща буквата c в малка.           
    Пример: toLower 'Q' = 'q';      toLower 'q' = 'q';      toLower '1' = '1'
    
    isUpper c - проверява дали буквата c e главна.
    Пример: isUpper 'Q' = True;     isUpper 'q' = False;    isUpper '1' = False
    
    isLower c - проверява дали буквата c e малка.   
    Пример: isLower 'Q' = False;    isLower 'q' = True;     isLower '1' = False
    
    isAlpha c - проверява дали символът c е буква.  
    Пример: isAlpha 'Q' = True;     isAlpha 'q' = True;     isAlpha '1' = False
    
    isDigit c - проверява дали символът c e цифра.  
    Пример: isDigit 'Q' = False;    isDigit 'q' = False;    isDigit '1' = True
    
    isSpace c - проверява дали символът c e интервал.   
    Пример: isSpace ' ' = True;     isSpace '\t' = True;    isSpace 'q' = False
    
    isAlphaNum c - проверява дали символът c е буква или цифра.
    Пример: isAlphaNum ';' = False; isAlphaNum 'q' = True;  isAlphaNum '1' = True


4. Символни низове: символният низ в Haskell е просто списък от символи, т.е. String = [Char].
Следователно всички функции работещи върху списъци, работят и върху символни низове!


5. read/show:
    show a - връща стринговата репрезентация на а.
    Пример:
        show 123        = "123"
        show "123"      = "\"123\""
        show [1, 2, 3]  = "[1,2,3]"

    read s - конвертира символния низ s до стойност.
    Пример:
        read "123" :: Integer           = 123
        read "[1,2,3]" :: [Integer]     = [1, 2, 3]
-}


{-
Задача 1.
Напишете фунцкция mylowers str, която обръща в малки букви всички символи на низа str.

    Пример: mylowers "banaNA" = mylowers "BAnaNA" = "banana"
-}


{-
Задача 2.
Напишете функция myallcaps str, която обръща в главни всички букви на символния низ str

    Пример: myallcaps "banana" = myallcaps "bAnaNA" = myallcaps "BanAna" = "BANANA"
-}


{-
Задача 3.
Напишете функция myfirstcaps str, която обръща само първата буква в главна, а останалите в
малки.

    Пример: myfirstcaps "banana" = myfirstcaps "baNAna" = "Banana"
-}


{-
Задача 4.
Напишете функция myswitchcaps str, която обръща малките букви в големи а големите в малки.

    Пример: myswitchcaps "baNaNA" = "BAnAna"
-}


{-
Задача 5.
Напишете функция mywords c str, която разбива символния низ str на списък
от поднизове, чиито сепаратор е символът c.
    
    Пример:
        mywords ' ' "The Sound of Silence" = ["The", "Sound", "of", "Silence"]
        mywords ',' "One,Two,Three,Four"   = ["One", "Two", "Three", "Four"]
-}


{-
Задача 6.
Напишете функция myunwords c strs, която прави обратното на предишната.

    Пример:
        myunwords ' ' ["The", "Sound", "of", "Silence"] = "The Sound of Silence"
        myunwords ',' ["One", "Two", "Three", "Four"] = "One,Two,Three,Four"
-}


{-
Задача 7.
Напишете функция mytitle str, която превръща в главна първата буква на всяка дума от
символния низ str, а останалите в малки.

    Пример: mytitle "the souND aND tHe fuRY" = "The Sound And The Fury"
-}


{-
Задача 8.
Напишете функция myrmspaces str, която премахва всички интервали от символния низ str.

    Пример: myrmspaces "The Sound And The Fury" = "TheSoundAndTheFury"

Напишете функцията по три начина.
а). рекурсивно: myrmspaces_rec
б). чрез list-comprehension: myrmspaces_lc
в). използвайки функцията filter: myrmspaces_flt
-}


{-
Задача 9.
Напишете функция myhexdigit n, която за всяко 0 <= n <= 15, връща шестнайсетичния символ,
съответстащ на n.

    Пример: myhexdigit 0  = '0'
            myhexdigit 9  = '9'
            myhexdigit 10 = 'A'
            myhexdigit 15 = 'F'
-}


{-
Задача 10.
Напишете функция myhexstr n, която връща шестнайсетичното представяне на числото n >= 0.
    Пример:
        myhexstr 0 = "0x0"
        myhexstr 15 = "0xF"
        myhexstr 1234 = "0x4D2" 
-}


{-
Задача 11.
Напишете оператор n ## k, който взима n > 0 и k >= 0 и връща сумата от всяка цифра
на n повдигната на степен k.

   Пример: 12 ## 2 = 1 ^ 2 + 2 ^ 2 = 1 + 4 = 5
-}


{-
Задача 12.
Напишете функция mydigits n, която връща списък с цифрите на числото n >= 0.

    Пример: mydigits 1234 = [1, 2, 3, 4]
-}


{-
Задача 13.
Напишете функция myelems xs, която разделя списъка xs на спицъци,
съдържащи всеки от индивидуалните елементи на xs.

    Пример: myelems [1, 2, 3] = [[1], [2], [3]]
-}


{-
Задача 14.
Напишете функция myfind x xs, която връща всички индекси на елементи в списъка xs,
чиято стойност е равна на x.

    Пример: myfind 1 [1, 2, 3, 1, 4] = [0, 3]
            myfind 1 [] = []

а). рекурсивно: myrmspaces_rec
б). чрез list-comprehension: myrmspaces_lc
-}


{-
Задача 14.
Напишете функция mysublists xs, която връща списък с всички подсписъци
на списъка xs.

    Пример: mysublists [1, 2] = [[], [1], [2], [1, 2]]
            mysublists [] = [[]]
-}


{-
Задача 15.
Напишете функция mypick k xs, която връща списък с всички възможни 
избора на k елемента от списъка xs.

    Пример: mypick 2 [1, 2, 3] = [[1, 2], [1, 3], [2, 3]]

В случая примемаме, че изборът [1, 2] е неразличим от [2, 1]

Може да се опитате да решите задачата и в случая, когато ги приемаме
за различни. Тогава:
    mypick 2 [1, 2, 3] = [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]]
-}

